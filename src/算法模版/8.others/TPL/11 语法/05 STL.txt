重载== != 用于hash等容器
重载< 用于有序容器

reverse 逆序 类似sort用法
v.reserve(1000) 扩容到1000 但是实际sz可能不是1000 避免中途扩容

priority_queue<Node, vector<Node>, cmp> pq;
struct cmp {
  static bool operator()(const Node& a, const Node& b) const {return a.v < b.v;}
};
struct Node
{
	int x;
	bool operator==(const Node oth) const{return x == oth.x;}
	friend bool operator<(const Node& lhs, const Node& rhs){return lhs.x<rhs.x;} 
	bool operator<(const Node& rhs)const{return x<rhs.x;} 
};

greater<ll> HEAP 从小到大 没有的话默认less
greater<ll>() sort 从大到小 没有的话默认less
lower_bound 默认less<ll>() 对从小到大的进行二分

count效率低 甚至不如[] 通常建议用find代替count 用map代替set
set.lower_bound是O(logN) 但是lower_bound(set.begin(),set.end())是O(N)

multiset 用的时候 erase（val） 把所有是这个值的删除
erase（地址） 把这个地址删除

unordered_map<STR,ll> mp[n];
unordered_set<STR> s;

resize不会重置之前的内容 只会指定之后扩充内容是啥
vector的resize/clear方法之后可以shrink_to_fit重新分配内存

list链表使用remove需要重构结构体的==

全排列函数 std::next_permutation(); std::prev_permutation();
建议使用下标来全排列
否则 要求数值有序 且唯一不重复
不然很容易少情况
do{}while(next_permutation(posl,posr+1) );

size()返回的是无符号整形 0-1会变成上限 导致for循环出问题

迭代器示例
set<type>::iterator iter_name = set_name.begin();

queue<ll,deque<ll>>
第二个容器是默认的 也可以是list 但不能是vector

priority_queue<ll,vector<ll>,less<ll>>
第二个容器 第三个比较器是默认的 默认前大后小
第二个容器可以是deque 但不能是list